#define F_CPU 16000000UL
#include <avr\io.h>
#include <util\delay.h>
#include <stdio.h>
#include <stdlib.h>

#define control_bus PORTD
#define controlbus_direction DDRD
#define data_bus PORTD
#define databus_direction DDRD

#define rs 2
#define en 3
#define d4 4
#define d5 5
#define d6 6
#define d7 7

// define port for sensor
#define sensor PORTC
#define sensor_out DDRC
//defind port output for motor 
#define fan PORTB
#define fan_out DDRB = 0xFF; 
// defind the defaut value for termperture 


char bufff[16];
double val;
double valf;
double average = 0;


void LCD_CmdWrite( char a)
{
	if(a & 0x80) data_bus|=(1<<d7); else data_bus&= ~(1<<d7);
	if(a & 0x40) data_bus|=(1<<d6); else data_bus&= ~(1<<d6);
	if(a & 0x20) data_bus|=(1<<d5); else data_bus&= ~(1<<d5);
	if(a & 0x10) data_bus|=(1<<d4); else data_bus&= ~(1<<d4);
	control_bus &=~(1<<rs);control_bus |=(1<<en);
	_delay_ms(2);
	control_bus &=~(1<<en);
	
	_delay_ms(2);
	
	if(a & 0x08) data_bus|=(1<<d7); else data_bus&= ~(1<<d7);
	if(a & 0x04) data_bus|=(1<<d6); else data_bus&= ~(1<<d6);
	if(a & 0x02) data_bus|=(1<<d5); else data_bus&= ~(1<<d5);
	if(a & 0x01) data_bus|=(1<<d4); else data_bus&= ~(1<<d4);
	control_bus &=~(1<<rs);control_bus |=(1<<en);
	_delay_ms(2);
	control_bus &=~(1<<en);
	
	_delay_ms(2);
}




void LCD_DataWrite( char a)
{
	
	if(a & 0x80) data_bus|=(1<<d7); else data_bus&= ~(1<<d7);
	if(a & 0x40) data_bus|=(1<<d6); else data_bus&= ~(1<<d6);
	if(a & 0x20) data_bus|=(1<<d5); else data_bus&= ~(1<<d5);
	if(a & 0x10) data_bus|=(1<<d4); else data_bus&= ~(1<<d4);
	control_bus |=(1<<rs)|(1<<en);
	_delay_ms(2);
	control_bus &=~(1<<en);
	_delay_ms(2);
	
	if(a & 0x08) data_bus|=(1<<d7); else data_bus&= ~(1<<d7);
	if(a & 0x04) data_bus|=(1<<d6); else data_bus&= ~(1<<d6);
	if(a & 0x02) data_bus|=(1<<d5); else data_bus&= ~(1<<d5);
	if(a & 0x01) data_bus|=(1<<d4); else data_bus&= ~(1<<d4);
	control_bus |=(1<<rs)|(1<<en);
	_delay_ms(2);
	control_bus &=~(1<<en);
	_delay_ms(2);
	
}





void LCD_Init()
{
	controlbus_direction |= ((1<<rs)|(1<<en));
	databus_direction |= ((1<<d7)|(1<<d6)|(1<<d5)|(1<<d4));
	_delay_ms(2);
	LCD_CmdWrite(0x01); // clear display
	LCD_CmdWrite(0x02); // back to home
	LCD_CmdWrite(0x28); // 4bit,2line,5x7 pixel
	LCD_CmdWrite(0x06); // entry mode,cursor increments by cursor shift
	LCD_CmdWrite(0x0c); // display ON,cursor OFF
	LCD_CmdWrite(0x80); // force cursor to begin at line1

}

void LCD_Disp(const char *p)
{
	while(*p!='\0')
	{
		LCD_DataWrite(*p);
		p++; _delay_ms(2);
	}
}

void LCD_setCursor(int a, int b)
{
	int i=0;
	switch(b){
		case 0:LCD_CmdWrite(0x80);break;
		case 1:LCD_CmdWrite(0xC0);break;
		case 2:LCD_CmdWrite(0x94);break;
	case 3:LCD_CmdWrite(0xd4);break;}
	for(i=0;i<a;i++)
	LCD_CmdWrite(0x14);
}
// function for temperture;
uint16_t temp()
{
	uint8_t low, high;

	
	ADMUX &= (0 << ADLAR) & (0 << REFS1);
	ADMUX &= (0 << MUX3) & (0 << MUX2) & (0 << MUX1) & (0 << MUX0);	
	ADMUX |= (1 << REFS0);


	ADCSRA &= (0 << ADIF) & (0 << ADIE);
	ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | ( 1 << ADPS0);
	ADCSRA |= (1 << ADEN);
	ADCSRA |= (1 << ADSC);

	_delay_ms(100);

	low  = ADCL;
	high = ADCH;
	
	return (high << 8) | low;
	
}

int main()
{
	int default_temp = 50; 
	LCD_Init();

	while(1)
	{
		LCD_setCursor(4,0);
		_delay_ms(20);
		val = temp();
		val = (((val/1024.0 * 5 ) - 0.5 ) * 100); // this is conver from input to C temp
		valf = (val * 9 / 5) + 32; // this is conver from C to F
		//average = (average + valf)/2.0;
		itoa(valf,bufff,10);
		LCD_Disp(bufff);
		LCD_Disp("F");
		_delay_ms(5000);
		
		if(bufff > default_temp)
		{
			PORTB = 0xFF;
			_delay_ms(500);
			PORTB = 0x00;
		}
		
	//	_delay_ms(5000);
	
		
	}
	
}



